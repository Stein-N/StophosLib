base {
    archivesName = "${mod_id}-forge-${minecraft_version}"
}

architectury {
    platformSetupLoomIde()
    forge()
}

dependencies {
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly project(":common")
}

loom {
    if(project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()){
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }

    forge {
        mixinConfig "${mod_id}.mixins.json"
        mixinConfig "${mod_id}.forge.mixins.json"
    }

    runs {
        client { client(); setConfigName("Forge Client") }
        server { server(); setConfigName("Forge Server") }
        datagen {
            data()
            setConfigName("Forge Datagen")
            programArgs "--all", "--mod", "${mod_id}"
            programArgs "--output", file("src/main/generated").getAbsolutePath()
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}
processResources {
    from project(":common").sourceSets.main.resources
    from project(":forge").file("src/main/generated")
}